Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(200,5) inlined into stencil.c(32,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(199,3) inlined into stencil.c(32,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(199,3) inlined into stencil.c(32,3)
      remark #15388: vectorization support: reference image_171 has aligned access   [ stencil.c(201,7) ]
      remark #15388: vectorization support: reference tmp_image_171 has aligned access   [ stencil.c(202,7) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.833
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 13 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 10.200 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(199,3) inlined into stencil.c(32,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference image_171 has aligned access   [ stencil.c(201,7) ]
      remark #15388: vectorization support: reference tmp_image_171 has aligned access   [ stencil.c(202,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(199,3) inlined into stencil.c(32,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(207,3) inlined into stencil.c(32,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(208,5) inlined into stencil.c(32,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stencil.c(209,7) inlined into stencil.c(32,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at stencil.c(210,9) inlined into stencil.c(32,3)
            remark #15329: vectorization support: scatter was emulated for the variable image_171:  strided by non-constant value   [ stencil.c(212,11) ]
            remark #15305: vectorization support: vector length 16
            remark #15300: LOOP WAS VECTORIZED
            remark #15462: unmasked indexed (or gather) loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 6 
            remark #15477: vector loop cost: 2.430 
            remark #15478: estimated potential speedup: 2.320 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at stencil.c(210,9) inlined into stencil.c(32,3)
         <Remainder loop for vectorization>
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 0.833
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at stencil.c(210,9) inlined into stencil.c(32,3)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(37,3)
   remark #15382: vectorization support: call to function stencil(const int, const int, float *__restrict__, float *__restrict__) cannot be vectorized   [ stencil.c(38,5) ]
   remark #15382: vectorization support: call to function stencil(const int, const int, float *__restrict__, float *__restrict__) cannot be vectorized   [ stencil.c(39,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at stencil.c(237,5) inlined into stencil.c(49,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(236,3) inlined into stencil.c(49,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(236,3) inlined into stencil.c(49,3)
      remark #15388: vectorization support: reference image_186 has aligned access   [ stencil.c(238,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 1.708
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ stencil.c(235,18) ]
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 13 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 6.200 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(236,3) inlined into stencil.c(49,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference image_186 has aligned access   [ stencil.c(238,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 6.833
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ stencil.c(235,18) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(236,3) inlined into stencil.c(49,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(244,3) inlined into stencil.c(49,3)
   remark #15382: vectorization support: call to function fputc(int, FILE *) cannot be vectorized   [ stencil.c(246,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) line 246 and call:fputc(int, FILE *) line 246
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) line 246 and call:fputc(int, FILE *) line 246

   LOOP BEGIN at stencil.c(245,5) inlined into stencil.c(49,3)
      remark #15527: loop was not vectorized: function call to fputc(int, FILE *) cannot be vectorized   [ stencil.c(246,7) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: stencil(const int, const int, float *__restrict__, float *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(78,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at stencil.c(78,5)
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(81,5) ]
   remark #15388: vectorization support: reference image has aligned access   [ stencil.c(81,5) ]
   remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(81,5) ]
   remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(81,5) ]
   remark #15388: vectorization support: reference image has aligned access   [ stencil.c(81,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 3.870 
   remark #15478: estimated potential speedup: 5.120 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at stencil.c(78,5)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(81,5) ]
   remark #15388: vectorization support: reference image has aligned access   [ stencil.c(81,5) ]
   remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(81,5) ]
   remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(81,5) ]
   remark #15388: vectorization support: reference image has aligned access   [ stencil.c(81,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.667
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at stencil.c(78,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at stencil.c(102,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(113,5)
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(118,7) ]
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(118,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(118,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(118,7) ]
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(118,7) ]
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(118,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 3 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 28 
      remark #15477: vector loop cost: 4.620 
      remark #15478: estimated potential speedup: 5.030 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(113,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(118,7) ]
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(118,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(118,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(118,7) ]
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(118,7) ]
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(118,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.588
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(113,5)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(113,5)
   <Peeled loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(144,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(153,5)
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(157,7) ]
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(157,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(157,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(157,7) ]
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(157,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 24 
      remark #15477: vector loop cost: 3.870 
      remark #15478: estimated potential speedup: 5.120 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(153,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(157,7) ]
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(157,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(157,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(157,7) ]
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(157,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(153,5)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(153,5)
   <Peeled loop for vectorization>
   LOOP END
LOOP END
===========================================================================
